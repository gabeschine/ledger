// Copyright 2016 The Fuchsia Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

[DartPackage="ledger"]
module ledger;

import "apps/ledger/services/public/ledger.fidl";
import "apps/modular/services/auth/token_provider.fidl";

// Entry interface implemented by the Ledger application, intended to be used by
// the process setting up the user environment to obtain repositories for
// individual users.
[ServiceName="ledger::LedgerRepositoryFactory"]
interface LedgerRepositoryFactory {
  // Binds to the repository stored under |repository_path|, creating it if
  // needed. If this is called multiple times for the same |repository_path|,
  // only the first instance of |server_id| / |token_provider| will be used. Any
  // subsequent ones will simply be ignored.
  //
  // Parameters:
  // |repository_path| absolute path of the disk directory where the
  //     repository is stored. The name of the user is inferred as the name of
  //     the innermost directory of |repository_path|. TODO(ppi): explicitly
  //     retrieve user name from the framework.
  // |server_id| id of the Firebase Db instance to use for cloud sync. Passing
  //     null disables sync.
  // |token_provider| is used by the Ledger to get the appropriate auth tokens
  //     associated with user for whom |repository| is being created. Passing
  //     null will only sync with an unprotected cloud instance. If the
  //     |token_provider| sent here is disconnected, all connection for the
  //     repository will be disconnected by the Ledger.
  GetRepository(string repository_path,
                string? server_id,
                modular.auth.TokenProvider? token_provider,
                LedgerRepository& repository) => (Status status);

  // Erases the data stored in the given repository, both locally and in the
  // cloud.
  //
  // Note that there is no undo and no confirmation step on this level - the
  // caller needs to ensure that this is only called when intended.
  EraseRepository(string repository_path,
                  string server_id,
                  modular.auth.TokenProvider token_provider) => (Status status);
};

// Controller interface for the Ledger application lifecycle.
[ServiceName="ledger::LedgerController"]
interface LedgerController {
  // Terminate the ledger application.
  Terminate();
};

interface LedgerRepository {
  // Creates a new Ledger for the given |ledger_name| if it doesn't already
  // exist.
  GetLedger(array<uint8> ledger_name, Ledger& ledger) => (Status status);

  // Binds a new LedgerRepository handle to this repository.
  Duplicate(LedgerRepository& request) => (Status status);

  // Sets a watcher to track the synchronization state of a user's Ledger. The
  // current state is immediately sent to the watcher when this method is
  // called.
  SetSyncStateWatcher(SyncWatcher watcher) => (Status status);
};
